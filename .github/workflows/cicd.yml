name: Build & Deploy Website
on:
  push:
    branches: [ master ]

jobs:
  AESD-Course-Project-CICD:
    runs-on: ubuntu-18.04
    # env: # $BUNDLE_GEMFILE must be set at the job level, so it is set for all steps
    #   BUNDLE_GEMFILE: ${{ github.workspace }}/Gemfile.lock
    steps:
      - uses: actions/checkout@v2
      - name: Checkout Latest
        run: |
          echo $PWD && ls -alh
          git status
          git fetch --all
          git pull --rebase origin master
          git status
          echo $PWD && ls -alh

      - name: Setup Runner OS Cache
        id: cache-os-packages
        uses: actions/cache@v2
        with:
          path: ${{ runner.temp }}/cache_dir
          key: ${{ runner.os }}-cache-os-packages-v2.1

      - name: Install Packages If Not Cached
        if: steps.cache-os-packages.outputs.cache-hit != 'true'
        env:
          SOURCE: ${{ runner.temp }}/cache_dir
        run: |
          set +xv
          echo "Action environment variables"
          echo "github.workspace: ${{ github.workspace }}"
          echo "runner.workspace: ${{ runner.workspace }}"
          echo "runner.os: ${{ runner.os }}"
          echo "runner.temp: ${{ runner.temp }}"
          pwd
          echo "SOURCE: ${SOURCE}"
          ls -lha /
          sudo du -h -d 1 / 2> /dev/null || true
          sudo apt update
          echo "Set up snapshot"
          mkdir -p "${{ runner.temp }}"/snapshots/
          echo "Install tools"
          sudo rm -f /var/lib/apt/lists/lock
          echo "Take first snapshot"
          sudo find / \
                -type f,l \
                -not \( -path "/sys*" -prune \) \
                -not \( -path "/proc*" -prune \) \
                -not \( -path "/mnt*" -prune \) \
                -not \( -path "/dev*" -prune \) \
                -not \( -path "/run*" -prune \) \
                -not \( -path "/etc/mtab*" -prune \) \
                -not \( -path "/var/cache/apt/archives*" -prune \) \
                -not \( -path "/tmp*" -prune \) \
                -not \( -path "/var/tmp*" -prune \) \
                -not \( -path "/var/backups*" \) \
                -not \( -path "/boot*" -prune \) \
                -not \( -path "/vmlinuz*" -prune \) \
                > "${{ runner.temp }}"/snapshots/snapshot_01.txt 2> /dev/null \
                || true
          echo "Install dependencies"
          sudo apt-get install -y libgdbm-dev libgdbm-compat-dev \
          fonts-linuxlibertine texlive-lang-french texlive-latex-base texlive-latex-recommended wget
          echo "Take second snapshot"
          sudo find / \
                -type f,l \
                -not \( -path "/sys*" -prune \) \
                -not \( -path "/proc*" -prune \) \
                -not \( -path "/mnt*" -prune \) \
                -not \( -path "/dev*" -prune \) \
                -not \( -path "/run*" -prune \) \
                -not \( -path "/etc/mtab*" -prune \) \
                -not \( -path "/var/cache/apt/archives*" -prune \) \
                -not \( -path "/tmp*" -prune \) \
                -not \( -path "/var/tmp*" -prune \) \
                -not \( -path "/var/backups*" \) \
                -not \( -path "/boot*" -prune \) \
                -not \( -path "/vmlinuz*" -prune \) \
                > "${{ runner.temp }}"/snapshots/snapshot_02.txt 2> /dev/null \
                || true
          echo "Parse for Changes"
          diff -C 1 \
              --color=always \
              "${{ runner.temp }}"/snapshots/snapshot_01.txt \
              "${{ runner.temp }}"/snapshots/snapshot_02.txt \
              | grep -E "^\+" \
              | sed -E s/..// \
              > "${{ runner.temp }}"/snapshots/snapshot_new_files.txt
          < "${{ runner.temp }}"/snapshots/snapshot_new_files.txt wc -l
          ls -lha "${{ runner.temp }}"/snapshots/
          echo "Make cache directory"
          rm -fR "${SOURCE}"
          mkdir -p "${SOURCE}"
          while IFS= read -r LINE; do
            sudo cp -a --parent "${LINE}" "${SOURCE}"
          done < "${{ runner.temp }}"/snapshots/snapshot_new_files.txt
          ls -lha "${SOURCE}"
          sudo du -sh "${SOURCE}" || true

      - name: Installing Cached Packages
        if: steps.cache-os-packages.outputs.cache-hit == 'true'
        env:
          SOURCE: ${{ runner.temp }}/cache_dir
        run: |
          echo "Installing Cached Packages"
          ls -lha "${SOURCE}"
          sudo cp --force --recursive "${SOURCE}"/. /

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Set Python w/ Caching
        id: cache-py-packages
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('.github/scripts/py-deps.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      # Potential, untested improvement of cached dependencies
      # - name: Set Python w/ Caching
      #   id: cache-py-packages
      #   uses: actions/cache@v2
      #   with:
      #     path: ${{ env.pythonLocation }}
      #     key: ${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('.github/scripts/py-deps.txt') }}

      - name: Install Python Dependencies If Not Cached
        if: steps.cache-py-packages.outputs.cache-hit != 'true'
        run: sudo pip install --upgrade --upgrade-strategy eager -r .github/scripts/py-deps.txt 

      - name: Initialize Ruby
        id: cache-ruby-packages
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7
          bundler-cache: true

      - name: Jekyll Build the Website
        env:
          GITHUB_REPOSITORY:  AESD-Course-Project/AESD-Course-Project.github.io
          GITHUB_TOKEN: ${{ secrets.AESD_PAT }}
          GITHUB_USER: ${{ github.actor }}
        run: |
          echo $PWD && ls -alh && env
          ./.github/scripts/jekyll_prep_wikimd
          echo $PWD && ls -alh && env
          bundle exec jekyll build -V
          echo $PWD && ls -alh && env
          
      - name: Publish to GH-Pages
        env:
          GITHUB_REPOSITORY: AESD-Course-Project/AESD-Course-Project.github.io
          GITHUB_TOKEN: ${{ secrets.AESD_PAT }}
          GITHUB_USER: ${{ github.actor }}
        run: |
          echo $PWD && ls -alh
          git config --global user.email "$(git log -1 --pretty=format:'%ae')"
          git config --global user.name "$(git log -1 --pretty=format:'%an')"
          export COMMIT_MSG="$(git log -1 --pretty=format:'%B')"
          git clone https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git public/
          cd public/ 
          git checkout gh-pages
          git status
          echo $PWD && ls -alh
          cp -rf ../_site/* ./
          touch .nojekyll
          git add -A -v
          echo $PWD && ls -alh
          git status
          git commit -m "$COMMIT_MSG"
          git push
          git status
