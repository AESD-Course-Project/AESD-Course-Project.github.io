name: Build & Deploy Website
on:
  push:
    branches: [ master ]
  # Runs at 600 UTC daily
  schedule:
  - cron: "0 6 * * *"

jobs:
  AESD-Course-Project-CICD:
    runs-on: ubuntu-18.04
    # env: # $BUNDLE_GEMFILE must be set at the job level, so it is set for all steps
    #   BUNDLE_GEMFILE: ${{ github.workspace }}/Gemfile.lock
    steps:
      - uses: actions/checkout@v2
      - name: Checkout Latest
        run: |
          echo $PWD && ls -alh
          git status
          git fetch --all
          git pull --rebase origin master
          git status
          echo $PWD && ls -alh

      - name: Setup Runner OS Cache
        id: cache-os-packages
        uses: actions/cache@v2
        with:
          path: ${{ runner.temp }}/cache_dir
          key: ${{ runner.os }}-cache-os-packages-v2.1

      - name: Install Packages If Not Cached
        if: steps.cache-os-packages.outputs.cache-hit != 'true'
        env:
          SOURCE: ${{ runner.temp }}/cache_dir
        run: |
          set +xv
          echo "Action environment variables"
          echo "github.workspace: ${{ github.workspace }}"
          echo "runner.workspace: ${{ runner.workspace }}"
          echo "runner.os: ${{ runner.os }}"
          echo "runner.temp: ${{ runner.temp }}"
          pwd
          echo "SOURCE: ${SOURCE}"
          ls -lha /
          sudo du -h -d 1 / 2> /dev/null || true
          sudo apt update
          echo "Set up snapshot"
          mkdir -p "${{ runner.temp }}"/snapshots/
          echo "Install tools"
          sudo rm -f /var/lib/apt/lists/lock
          echo "Take first snapshot"
          sudo find / \
                -type f,l \
                -not \( -path "/sys*" -prune \) \
                -not \( -path "/proc*" -prune \) \
                -not \( -path "/mnt*" -prune \) \
                -not \( -path "/dev*" -prune \) \
                -not \( -path "/run*" -prune \) \
                -not \( -path "/etc/mtab*" -prune \) \
                -not \( -path "/var/cache/apt/archives*" -prune \) \
                -not \( -path "/tmp*" -prune \) \
                -not \( -path "/var/tmp*" -prune \) \
                -not \( -path "/var/backups*" \) \
                -not \( -path "/boot*" -prune \) \
                -not \( -path "/vmlinuz*" -prune \) \
                > "${{ runner.temp }}"/snapshots/snapshot_01.txt 2> /dev/null \
                || true
          echo "Install dependencies"
          sudo apt-get install -y libgdbm-dev libgdbm-compat-dev \
          fonts-linuxlibertine texlive-lang-french texlive-latex-base texlive-latex-recommended wget
          echo "Take second snapshot"
          sudo find / \
                -type f,l \
                -not \( -path "/sys*" -prune \) \
                -not \( -path "/proc*" -prune \) \
                -not \( -path "/mnt*" -prune \) \
                -not \( -path "/dev*" -prune \) \
                -not \( -path "/run*" -prune \) \
                -not \( -path "/etc/mtab*" -prune \) \
                -not \( -path "/var/cache/apt/archives*" -prune \) \
                -not \( -path "/tmp*" -prune \) \
                -not \( -path "/var/tmp*" -prune \) \
                -not \( -path "/var/backups*" \) \
                -not \( -path "/boot*" -prune \) \
                -not \( -path "/vmlinuz*" -prune \) \
                > "${{ runner.temp }}"/snapshots/snapshot_02.txt 2> /dev/null \
                || true
          echo "Parse for Changes"
          diff -C 1 \
              --color=always \
              "${{ runner.temp }}"/snapshots/snapshot_01.txt \
              "${{ runner.temp }}"/snapshots/snapshot_02.txt \
              | grep -E "^\+" \
              | sed -E s/..// \
              > "${{ runner.temp }}"/snapshots/snapshot_new_files.txt
          < "${{ runner.temp }}"/snapshots/snapshot_new_files.txt wc -l
          ls -lha "${{ runner.temp }}"/snapshots/
          echo "Make cache directory"
          rm -fR "${SOURCE}"
          mkdir -p "${SOURCE}"
          while IFS= read -r LINE; do
            sudo cp -a --parent "${LINE}" "${SOURCE}"
          done < "${{ runner.temp }}"/snapshots/snapshot_new_files.txt
          ls -lha "${SOURCE}"
          sudo du -sh "${SOURCE}" || true

      - name: Installing Cached Packages
        if: steps.cache-os-packages.outputs.cache-hit == 'true'
        env:
          SOURCE: ${{ runner.temp }}/cache_dir
        run: |
          echo "Installing Cached Packages"
          ls -lha "${SOURCE}"
          sudo cp --force --recursive "${SOURCE}"/. /

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Set Python w/ Caching
        id: cache-py-packages
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('.github/scripts/py-deps.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      # Potential, untested improvement of cached dependencies
      # - name: Set Python w/ Caching
      #   id: cache-py-packages
      #   uses: actions/cache@v2
      #   with:
      #     path: ${{ env.pythonLocation }}
      #     key: ${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('.github/scripts/py-deps.txt') }}

      - name: Install Python Dependencies If Not Cached
        if: steps.cache-py-packages.outputs.cache-hit != 'true'
        run: sudo pip install --upgrade --upgrade-strategy eager -r .github/scripts/py-deps.txt 

      # - name: Set Ruby Caching
      #   id: cache-ruby-packages
      #   uses: actions/cache@v2
      #   with:
      #     path: vendor/bundle
      #     key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-gems-

      - name: Initialize Ruby
        id: cache-ruby-packages
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7
          bundler-cache: true

#       - name: Install Jekyll Dependencies If Not Cached
#         if: steps.cache-ruby-packages.outputs.cache-hit != 'true'
#         run: |
#           gem install activesupport addressable ast autoprefixer-rails bigdecimal bourbon \
#           bundle bundler cmath coffee-script coffee-script-source colorator commonmarker \
#           concurrent-ruby csv date did_you_mean dnsruby em-websocket etc ethon eventmachine \
#           execjs faraday faraday-net_http fcntl ffi fiddle fileutils forwardable-extended \
#           gemoji github-pages github-pages-health-check html-pipeline html-proofer http_parser.rb \
#           i18n io-console ipaddr jekyll jekyll-autoprefixer jekyll-avatar jekyll-coffeescript \
#           jekyll-commonmark jekyll-commonmark-ghpages jekyll-default-layout jekyll-diagrams \
#           jekyll-favicon jekyll-feed jekyll-gist jekyll-github-metadata jekyll-include_sass \
#           jekyll-mentions jekyll-mermaid jekyll-optional-front-matter jekyll-paginate \
#           jekyll-readme-index jekyll-redirect-from jekyll-relative-links jekyll-remote-theme \
#           jekyll-sass-converter jekyll-seo-tag jekyll-sitemap jekyll-swiss jekyll-theme-architect \
#           jekyll-theme-cayman jekyll-theme-dinky jekyll-theme-hacker jekyll-theme-leap-day \
#           jekyll-theme-merlot jekyll-theme-midnight jekyll-theme-minimal jekyll-theme-modernist \
#           jekyll-theme-primer jekyll-theme-slate jekyll-theme-tactile jekyll-theme-time-machine \
#           jekyll-timeago jekyll-titles-from-headings jekyll-watch jekyll_picture_tag:1.14.0 jemoji \
#           json kramdown kramdown-parser-gfm liquid listen mercenary mime-types mime-types-data \
#           mini_i18n mini_magick minima minitest multipart-post net-telnet nokogiri nokogumbo \
#           objective_elements octokit openssl parallel parser pathutil power_assert \
#           psych public_suffix racc rainbow rake rb-fsevent rdoc regexp_parser rexml rouge \
#           rubocop rubocop-ast ruby-enum ruby2_keywords rubygems-update rubyzip sass sass-listen \
#           sassc sawyer scanf sdbm simpleidn stringio strscan terminal-table thor thread_safe \
#           typhoeus tzinfo unf unf_ext unicode-display_width w3c_validators yell zeitwerk
#           yarn global add @mermaid-js/mermaid-cli
#           bundle install

      - name: Jekyll Build the Website
        env:
          GITHUB_REPOSITORY:  AESD-Course-Project/AESD-Course-Project.github.io
          GITHUB_TOKEN: ${{ secrets.AESD_PAT }}
          GITHUB_USER: ${{ github.actor }}
        run: |
          echo $PWD && ls -alh && env
          ./.github/scripts/jekyll_prep_wikimd
          echo $PWD && ls -alh && env
          bundle exec jekyll build -V
          echo $PWD && ls -alh && env
          
      - name: Publish to GH-Pages
        env:
          GITHUB_REPOSITORY: AESD-Course-Project/AESD-Course-Project.github.io
          GITHUB_TOKEN: ${{ secrets.AESD_PAT }}
          GITHUB_USER: ${{ github.actor }}
        run: |
          echo $PWD && ls -alh
          git config --global user.email "$(git log -1 --pretty=format:'%ae')"
          git config --global user.name "$(git log -1 --pretty=format:'%an')"
          export COMMIT_MSG="$(git log -1 --pretty=format:'%B')"
          git clone https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git public/
          cd public/ 
          git checkout gh-pages
          git status
          echo $PWD && ls -alh
          cp -rf ../_site/* ./
          touch .nojekyll
          git add -A -v
          echo $PWD && ls -alh
          git status
          git commit -m "$COMMIT_MSG"
          git push
          git status
